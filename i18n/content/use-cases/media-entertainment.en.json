
{
    "catalogue": [
        {
            "id": 61,
            "title": "Media Asset Tagging & Retrieval",
            "industry": "Media & Entertainment",
            "technology": "Power Automate",
            "miniDescription": "Use AI to automatically tag and catalog your vast library of digital assets, making them instantly searchable via natural language.",
            "technicalLevel": 9,
            "problem": "A video editor needs to find a short clip of a 'sunset over a lake in Switzerland' for a commercial. She has to manually scrub through hours of footage in the digital asset management (DAM) system because the files have generic names and no descriptive tags.",
            "value": "Media companies manage vast libraries of digital assetsâ€”images, videos, audio files. Manually tagging these assets with metadata is a tedious, time-consuming task, and without proper tagging, finding a specific asset is nearly impossible. This AI-powered solution automates the tagging process and provides an intelligent search interface.",
            "roi": "The ROI is measured in reclaimed creative time.\n\n<code>Formula:\nAnnual Savings = (Hours Saved per User per Week * Number of Users * 52 * Hourly Cost)</code>\n\nExample: Saves thousands of hours of manual logging and tagging work. Makes the entire asset library searchable and valuable. Dramatically accelerates the creative and production process by allowing editors and producers to find what they need in seconds, not hours.",
            "implementationGuide": "<h5>The Solution Blueprint: A Tier 1 Generative Action First Approach</h5><p>This solution combines AI-powered analysis with a conversational search front-end.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Set up Azure AI Services:</strong> You will need an Azure subscription with Azure AI Video Indexer set up.</li><li><strong>Build the Tagging Flow:</strong> Trigger the flow When a file is created in SharePoint or Blob Storage. Use the HTTP action to call the Video Indexer API to upload and process the file. This is an asynchronous process, so the flow will need to pause and check for completion. Once processing is complete, use another HTTP action to get the JSON output. Use the Update file properties (SharePoint) action to write the keywords and other metadata to columns in the document library.</li><li><strong>Configure the Search Copilot:</strong> Point a Copilot Studio instance to your DAM/SharePoint library using Generative Answers. Because the metadata is now rich and descriptive, natural language search becomes highly effective.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Use the transcript data. The full transcript generated by Video Indexer is also searchable. A journalist could ask the Copilot, \"Find me the interview where the CEO mentioned 'Project Titan'.\" The Copilot can search the transcripts of all video files to find the exact moment and provide a direct link to it.</p>"
        },
        {
            "id": 62,
            "title": "Subscriber Churn Prediction & Intervention",
            "industry": "Media & Entertainment",
            "technology": "Power Automate",
            "miniDescription": "Use AI to predict which subscribers are at risk of canceling and automatically trigger targeted retention offers to keep them.",
            "technicalLevel": 8,
            "problem": "A long-time subscriber to a streaming service has been using the service less and less over the past three months. The company has no idea he is unhappy until he clicks the 'Cancel Subscription' button. At that point, it's too late to save him.",
            "value": "For subscription-based media or telecom companies, customer churn is a primary threat to revenue. Identifying subscribers who are at risk of canceling before they do so allows the company to intervene with targeted retention offers. This solution uses AI to predict churn and automates the intervention process.",
            "roi": "The ROI is measured in retained revenue.\nA = Average monthly revenue per subscriber.\nB = Number of at-risk subscribers identified per month.\nC = Success rate of the retention offer (e.g., 20% or 0.20).\n\n<code>Formula:\nMonthly Revenue Saved = A * B * C</code>\n\nExample: If the average revenue is $20/month (A), the system identifies 1,000 at-risk subscribers (B), and the retention offer convinces 20% of them to stay (C), the company saves $20 * 1,000 * 0.20 = $4,000 in monthly recurring revenue.",
            "implementationGuide": "<h5>The Solution Blueprint: A Proactive AI-Driven Workflow</h5><p>This is a proactive, AI-driven workflow.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Train the AI Model:</strong> This is the most critical part. You need clean, historical data of past subscribers, both those who churned and those who didn't. Use this data to train a custom Prediction model in AI Builder.</li><li><strong>Build the Flow:</strong> Create a Scheduled cloud flow. Use List rows and other actions to gather all the necessary input data for the model. Use a loop and the AI Builder Predict action to get the churn score for each customer. Use a Condition to check if the score is high. Inside the \"If yes\" branch, add the retention action (e.g., Create a task in Dynamics 365 or Add a row to an Excel file for the marketing team).</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Personalize the intervention. Instead of a generic discount, the flow could analyze the customer's viewing history. If they watch a lot of science fiction, the retention email could highlight an upcoming sci-fi blockbuster exclusive to the platform, making the offer much more relevant and effective.</p>"
        },
        {
            "id": 63,
            "title": "Ad Sales Order Processing",
            "industry": "Media & Entertainment",
            "technology": "Power Automate",
            "miniDescription": "Automate the entire order-to-cash process for ad sales, from inventory checks and approvals to booking and invoicing.",
            "technicalLevel": 7,
            "problem": "An ad salesperson closes a deal with a new advertiser. They fill out a paper form, which goes to the ad operations team. The ad ops team has to manually check if the requested ad slots are available, then get the sales manager to approve the discounted price, and finally book the ad in the broadcast scheduling system. The process is slow and can lead to errors.",
            "value": "Processing advertising sales orders for a media company involves multiple steps: checking ad inventory, getting approval on pricing, booking the ad slot in the scheduling system, and then generating the invoice. This automation streamlines the entire order-to-cash process for ad sales.",
            "roi": "The ROI is measured in accelerated revenue recognition.\n\n<code>Formula:\nValue = (Value of Faster Revenue Recognition) + (Admin Hours Saved * Hourly Cost)</code>\n\nExample: Dramatically accelerates the ad sales process, allowing the company to recognize revenue faster. Reduces the risk of errors like double-booking ad slots. Frees up the ad ops team from manual data entry to focus on optimizing ad yield.",
            "implementationGuide": "<h5>The Solution Blueprint: An End-to-End Business Process Automation</h5><p>This is an end-to-end business process automation.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>API Access:</strong> You need API access to your ad inventory/scheduling system and your financial system.</li><li><strong>Build the Power App:</strong> Create a simple, mobile-friendly app for salespeople to enter order details.</li><li><strong>Build the Flow:</strong> Trigger from the Power App. Use HTTP actions to call the ad inventory system. Use a Condition to check the result and another Condition to check if a pricing approval is needed. Use the Start and wait for an approval action for the manager's sign-off. Use further HTTP actions to book the ad and create the invoice.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Automate proof-of-performance. After an ad has aired, the broadcast system logs the exact time it ran. A separate flow can be triggered by this log. It can automatically generate a 'proof-of-performance' report and email it to the advertiser, providing excellent customer service and speeding up the payment cycle.</p>"
        },
        {
            "id": 64,
            "title": "Royalty Payment Calculation",
            "industry": "Media & Entertainment",
            "technology": "Power Automate",
            "miniDescription": "Automate the complex calculation and statement generation for royalty payments to artists, writers, and partners.",
            "technicalLevel": 7,
            "problem": "At the end of each quarter, a finance analyst at a streaming service has to calculate the royalties owed to hundreds of independent producers. They have to pull viewership data from one system, ad revenue data from another, and then manually apply the specific royalty percentage from each producer's contract, a process that takes days and is prone to calculation errors.",
            "value": "Media companies often have complex agreements to pay royalties to artists, writers, or production houses based on viewership, ad revenue, or other metrics. Calculating these royalties is a complex, spreadsheet-intensive task for the finance department. This solution automates the calculation and statement generation.",
            "roi": "The ROI is measured in accuracy and efficiency.\n\n<code>Formula:\nAnnual Savings = (Hours Saved per Quarter * 4 * Hourly Cost) + (Value of Error Reduction)</code>\n\nExample: Saves hundreds of hours of manual, high-stakes calculation work for the finance team. Increases accuracy and reduces the risk of over- or under-payment. Improves relationships with content partners through timely and transparent reporting.",
            "implementationGuide": "<h5>The Solution Blueprint: A Scheduled, Data-Intensive Workflow</h5><p>This is a scheduled, data-intensive back-end workflow.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Centralize Agreements:</strong> The key is to have all royalty terms in a single, structured list that the flow can query.</li><li><strong>Build the Flow:</strong> Create a Scheduled cloud flow. Add actions to get the necessary performance data from your analytics systems. Use a loop to iterate through each rights holder. Inside the loop, perform the calculation using Compose actions and expressions. Use the Word Online Populate a Microsoft Word template action to create the statement. Use an approval action to send the statement for final review.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Create a partner portal. Use Power Pages to build a secure portal where rights holders can log in. The flow can publish the royalty statements directly to the portal, allowing partners to view both current and historical statements on-demand, providing a premium self-service experience.</p>"
        }
    ]
}
