
{
    "catalogue": [
        {
            "id": 30,
            "title": "The 24/7 City Hall: Automating Citizen Service Requests",
            "industry": "Public Sector",
            "technology": "Copilot Studio & Power Automate",
            "miniDescription": "Build an AI assistant that allows citizens to report non-emergency issues like potholes or broken streetlights instantly, any time of day.",
            "technicalLevel": 5,
            "problem": "A resident, Jane, notices that the streetlight on her corner has been out for two days. She calls the city's 311 hotline. After navigating a phone menu and waiting on hold for ten minutes, she finally speaks to an operator. She describes the problem and location, and the operator manually creates a work order in the public works system. The process is slow, inconvenient for Jane, and costly for the city.",
            "value": "For local governments, being responsive to citizen needs is the core of their mission. Yet, the primary channels for reporting non-emergency issues—like potholes, broken streetlights, or missed garbage collection—are often inefficient call centers with long wait times. This creates frustration for citizens and a high operational cost for the municipality. This guide will show you how to build a '24/7 City Hall,' an AI-powered assistant that allows citizens to report issues instantly, any time of day, and provides a better experience for everyone.",
            "roi": "The return is measured in direct cost savings from call deflection and a significant improvement in citizen satisfaction (CSAT).\nA = Number of non-emergency calls deflected from the live call center per month.\nB = Average cost to handle one live operator call.\nC = The strategic value of improved CSAT, civic engagement, and trust in local government.\n\n<code>Formula:\nMonthly Savings = (A * B) + Value of Improved Citizen Trust (C)</code>\n\nExample: If the bot deflects 5,000 calls a month (A) at an average cost of €6 per call (B), the city saves €30,000 every month in direct operational costs. The value of providing a modern, responsive service to citizens (C) is even greater, fostering a more positive and engaged community.",
            "implementationGuide": "<h5>The Solution Blueprint: A Pure Generative Action Approach</h5><p>Citizens will report issues using their own words. The core task is for the AI to understand the citizen's request, classify the IssueType, and extract the Location. A scripted Topic would be impossible to build for all potential issues and would feel bureaucratic to a citizen.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Create a Routing List:</strong>  Build a simple SharePoint list that maps Request Type keywords to the Responsible Department and their contact/system details. This makes the routing logic easy to update without changing the flow.</li><li><strong>Build the Service Engine (The Power Automate Plugin):</strong> Name it 'Create Citizen Service Request.' The description for the AI should be: 'Use this to log a new, non-emergency service request from a citizen. It requires the type of issue and a detailed location description.' Inputs should be IssueType and LocationDescription. The flow should call your work order system's API, create the ticket, parse the returned CaseID, and return it to the user.</li><li><strong>Enable the Plugin in Copilot Studio:</strong> Simply find your new plugin in your public-facing Copilot and switch it on.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Close the loop with proactive status updates. Create a separate Power Automate flow that is triggered when a work order's status is updated in the Public Works system. The flow can then automatically send an email or SMS notification to the citizen who originally reported the issue. 'Good news! The pothole you reported on Main Street has now been repaired.'</p>"
        },
        {
            "id": 31,
            "title": "Cut the Red Tape: Automating Permit Applications and Status Checks",
            "industry": "Public Sector",
            "technology": "Copilot Studio & Power Automate",
            "miniDescription": "Build a digital permitting assistant that streamlines the entire lifecycle, from a guided application to on-demand status checks.",
            "technicalLevel": 7,
            "problem": "A local business owner, Maria, wants to apply for a permit to install a new sign on her storefront. She has to download a confusing 10-page PDF form, fill it out by hand, and then physically mail it or drop it off at City Hall. A week later, wanting to check the status, her only option is to call a general information line, where an employee has to manually search through a database to give her a vague update. The process is inefficient for the city and a major source of frustration for Maria.",
            "value": "For any municipality, the permitting process—for everything from building a deck to opening a new restaurant—is a critical function. It's also notoriously slow, paper-based, and opaque. Citizens and business owners are often frustrated by the confusing forms and the 'black box' of the approval process, with no visibility into the status of their application. This guide will show you how to build a digital permitting assistant that streamlines the entire lifecycle, from application to status check.",
            "roi": "The return is measured in saved staff time, improved citizen/business satisfaction, and accelerated economic activity.\nA = Hours saved by city staff on manual data entry and answering status calls.\nB = The economic value of accelerating the permit process, allowing businesses to open or expand faster.\nC = The strategic value of being perceived as a modern, efficient, and business-friendly city.\n\n<code>Formula:\nValue Proposition = Economic Acceleration (B) + Improved Perception (C) + Operational Savings (A)</code>\n\nExample: If automating the permit process helps a new retail business open one month sooner, the city benefits from that extra month of sales tax revenue and employment. This economic impact (B) across many businesses is far more significant than the direct cost savings from reduced administrative work.",
            "implementationGuide": "<h5>The Solution Blueprint: A Hybrid Approach</h5><p>The permit application itself is a legal, compliance-driven process. A guided Topic is the best way to walk a citizen through the complex form, ensuring every required field is filled out correctly and every necessary document is uploaded. The second part of the use case, the status check, is a perfect Generative Action. A citizen will ask, 'What's the status of my permit application #P-12345?' and the AI needs to extract the ID and query the system.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Prepare Your Foundation (Permitting System & Dataverse):</strong> You need API access to your core permitting system to log new applications and query their status.</li><li><strong>Build the Application Intake (The Guided Topic):</strong> In Copilot Studio, create a new Topic: 'Apply for a Business Sign Permit.' Work with the planning department to map the paper form into a sequence of Question nodes.</li><li><strong>Build the Status Checker (The Generative Action Plugin):</strong> In Power Automate, create a new flow triggered by 'Run from Copilot.' Define the plugin with a name, description, and an ApplicationNumber input. The flow should call your permitting system's API to get the status and return it to the user.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Automate the approval workflow. The 'Apply for a Permit' flow can also orchestrate approvals. After logging the application, the flow can use the Approvals connector to automatically assign review tasks to the required departments (e.g., Planning, Fire, Public Works) in a sequential or parallel fashion.</p>"
        },
        {
            "id": 32,
            "title": "From Backlog to Breakthrough: Automating FOIA Request Management",
            "industry": "Public Sector",
            "technology": "Power Automate",
            "miniDescription": "Streamline the entire Freedom of Information Act (FOIA) lifecycle, from a structured intake portal to automated deadline tracking and task assignment.",
            "technicalLevel": 8,
            "problem": "A journalist, Tom, submits a FOIA request via email for all communications related to a recent zoning decision. The city clerk's office receives the email, manually logs it in a spreadsheet, and then forwards the request to three different department heads. Each department then has to manually search their own files and emails. The process is slow, difficult to track, and there's a high risk that a relevant document will be missed or a deadline will pass unnoticed.",
            "value": "For government agencies, responding to Freedom of Information Act (FOIA) or public records requests is a legal obligation. It's also a complex and labor-intensive process that involves logging requests, searching for documents across multiple departments, redacting sensitive information, and tracking strict legal deadlines. This manual effort often leads to significant backlogs and potential non-compliance. This guide will show you how to build an automated system that streamlines the entire FOIA lifecycle, from intake to delivery.",
            "roi": "The return is measured in saved staff time, improved compliance, and increased public transparency.\nA = Hours saved per request on manual logging, routing, and tracking.\nB = Number of FOIA requests received per year.\nC = The significant value of avoiding litigation or fines due to missed statutory deadlines.\n\n<code>Formula:\nAnnual Savings = (A * B * Staff Hourly Cost) + (Value of Compliance, C)</code>\n\nExample: If you save 2 hours of administrative work per request (A) and handle 500 requests a year (B), you save 1,000 hours of staff time. The primary value, however, is C—ensuring that the agency meets its legal obligations every time, which builds public trust and avoids costly legal challenges.",
            "implementationGuide": "<h5>The Solution Blueprint: A Hybrid Approach</h5><p>The initial FOIA request intake should be a structured, formal process. A public-facing Power Pages portal provides the ideal, secure interface for this. The complex backend workflow—tracking deadlines, assigning search tasks to departments, and compiling the final document package—is a perfect job for a powerful Power Automate flow.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Prepare Your Foundation (Portal & Dataverse):</strong> Create a simple, public-facing Power Pages portal with a form for submitting new FOIA requests. Create a Dataverse table 'FOIARequests' to be your single source of truth.</li><li><strong>Build the Intake and Orchestration Engine (The Power Automate Flow):</strong> Create a new flow triggered 'When a row is added' to your Dataverse table. The flow should calculate the deadline, use a Switch control to assign tasks to departments based on keywords, send an acknowledgment to the requester, and use a 'Delay until' action to set a reminder before the deadline.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Streamline the document review process. Create a secure SharePoint document library for each FOIA request. For the final step, you can integrate with Microsoft Purview Information Protection, which can use AI to automatically identify and suggest redactions for sensitive information before the documents are released.</p>"
        },
        {
            "id": 33,
            "title": "The Digital Advisor: An AI-Powered Policy Bot for Civil Servants",
            "industry": "Public Sector",
            "technology": "Copilot Studio",
            "miniDescription": "Build an AI-powered Copilot that provides civil servants with instant, accurate, and consistent answers to any internal policy question.",
            "technicalLevel": 2,
            "problem": "A public works employee, David, needs to purchase new safety equipment. He's unsure of the procurement process for items under €1,000. Does he need three quotes? Can he use the department credit card? He spends 20 minutes searching the agency's intranet, finds three conflicting documents, and finally gives up and asks his manager, who then has to spend another 10 minutes finding the correct, up-to-date procedure.",
            "value": "Government agencies run on a complex web of policies, procedures, and regulations. For civil servants, finding a definitive answer to a specific question—about travel expenses, procurement rules, or HR policies—can mean navigating a labyrinthine intranet or asking a senior colleague, taking up everyone's time. This 'internal friction' is a major drain on productivity. This guide will show you how to build a digital advisor, an AI-powered Copilot that provides instant, accurate, and consistent answers to any internal policy question.",
            "roi": "The return is measured in reclaimed productivity across the entire organization.\nA = Average time saved per employee per week by getting instant answers instead of searching or asking others.\nB = Number of employees in the agency.\nC = Average fully-loaded hourly cost of an employee.\n\n<code>Formula:\nAnnual Productivity Gain = A * B * 52 * C</code>\n\nExample: If you save each of your 1,000 employees (B) just 15 minutes per week (A=0.25 hours) at a blended cost of €40/hour (C), you reclaim 13,000 hours of productive time and **€520,000 in value every year**. This also improves employee satisfaction and ensures policies are followed more consistently.",
            "implementationGuide": "<h5>The Solution Blueprint: A Pure Generative Action Approach</h5><p>Employee questions about policy are unpredictable and highly specific. The core task is for the AI to understand the employee's natural language question and find the precise answer within the agency's official, trusted policy documents.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Prepare Your Foundation (The Single Source of Truth):</strong> Create a dedicated, secure SharePoint Online site to serve as the single, authoritative library for all current agency policies and procedures. Archive all old versions.</li><li><strong>Build the AI Brain (Configure Generative Answers):</strong> In Copilot Studio, create a new Copilot. In the 'Generative AI' section, enter the URL of the SharePoint policy library. Set content moderation to 'High'.</li><li><strong>Test and Deploy:</strong> Thoroughly test the Copilot with a pilot group. Once confident, deploy it broadly via Microsoft Teams.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Use the bot's data to identify confusing policies. In the Copilot Studio Analytics, review conversation transcripts. If many employees ask about the same topic, it's a clear signal that the official policy document is confusing and needs to be simplified.</p>"
        },
        {
            "id": 34,
            "title": "Reclaim Your Time: AI-Powered Summarization for Public Meeting Minutes",
            "industry": "Public Sector",
            "technology": "Power Automate",
            "miniDescription": "Use AI to listen to a public meeting recording and generate a high-quality draft of the minutes in a fraction of the time.",
            "technicalLevel": 7,
            "problem": "A city council meeting runs for three hours. The next day, the City Clerk, Michael, has to block off his entire morning to listen to the audio recording. He has to manually transcribe key decisions, note down who voted for and against each motion, and create a concise summary of the public comments. The process is tedious, and the final minutes aren't available to the public for several days.",
            "value": "For government clerks and administrative staff, the process of documenting public meetings is a core responsibility. It's also incredibly time-consuming. Staff spend hours listening to recordings and meticulously transcribing conversations to produce the official minutes. This manual process is a significant drain on resources that could be used for more valuable citizen-facing work. This guide will show you how to build an AI-powered assistant that can listen to a meeting and generate a high-quality draft of the minutes in a fraction of the time.",
            "roi": "The return is measured in a massive reduction of manual, administrative hours.\nA = Average time to manually produce the minutes for one meeting (in hours).\nB = Time required for a human to review and edit the AI-generated draft (in hours).\nC = Number of public meetings per month.\nD = Average fully-loaded hourly cost of the administrative staff.\n\n<code>Formula:\nMonthly Hours Saved = (A - B) * C\nMonthly Savings = Monthly Hours Saved * D</code>\n\nExample: If a 3-hour meeting takes 4 hours to manually process (A), but the AI draft only takes 30 minutes to review and edit (B=0.5), you save 3.5 hours per meeting. With 10 meetings a month (C) at a staff cost of €40/hour (D), you save 35 hours and **€1,400 every month**. This also increases transparency by allowing minutes to be published much faster.",
            "implementationGuide": "<h5>The Solution Blueprint: A Backend Engine with Human-in-the-Loop</h5><p>This is a pure process automation workflow triggered by an event (the addition of a new meeting recording file). The intelligence comes from Azure AI's ability to transcribe and summarize audio.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Prepare Your Foundation (SharePoint & Azure AI):</strong> Create a SharePoint document library with folders for 'Meeting Recordings' and 'Draft Minutes'. You will need an Azure subscription with Azure AI Speech services.</li><li><strong>Build the Summarization Engine (The Power Automate Flow):</strong> Create an Automated cloud flow with the 'When a file is created in a folder' SharePoint trigger. The flow should use the Azure AI Speech 'Transcribe audio' action, then the AI Builder 'Summarize text' action. Finally, use the Word Online 'Populate a Microsoft Word template' action to create the draft document and notify the clerk.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Automatically identify action items. After transcription, use the AI Builder 'Extract custom entities from text' model, trained on past minutes to recognize action items. The flow can then list these in a separate section of the draft document or create tasks in Microsoft Planner.</p>"
        },
        {
            "id": 51,
            "title": "Employee Benefits & Policy Questions",
            "industry": "Public Sector",
            "technology": "Copilot Studio",
            "miniDescription": "Provide a self-service tool for employees to get instant, accurate answers to questions about benefits, policies, and procedures.",
            "technicalLevel": 2,
            "problem": "A city employee, Jean, wants to know how many days of parental leave he is entitled to. He has to find the HR section of the city's intranet, locate the correct policy document (which might be outdated), and read through pages of legal text to find his answer. Unsure, he calls the central HR department, where an HR generalist has to look up the same information for him.",
            "value": "Government employees, like those in any large organization, have frequent questions about their benefits, pension plans, vacation policies, and other internal procedures. Answering these repetitive questions consumes a significant amount of time for HR and departmental administrators. This solution provides a self-service tool for employees to get instant, accurate answers.",
            "roi": "The return is measured in reclaimed productivity across the entire organization.\nA = Average time saved per employee per week by getting instant answers.\nB = Number of employees in the agency.\nC = Average fully-loaded hourly cost of an employee.\n\n<code>Formula:\nAnnual Productivity Gain = A * B * 52 * C</code>\n\nExample: If you save each of your 1,000 employees (B) just 15 minutes per week (A=0.25 hours) at a blended cost of €40/hour (C), you reclaim 13,000 hours of productive time and **€520,000 in value every year**.",
            "implementationGuide": "<h5>The Solution Blueprint: A Pure Generative Action Approach</h5><p>This is a perfect use case for a Tier 1: Generative Action First Copilot, leveraging a curated knowledge base.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Curate the Knowledge Base:</strong> Work with HR to gather all current, official policy documents and place them in a dedicated, secure SharePoint library. Ensure there are no draft or outdated versions.</li><li><strong>Configure the Copilot:</strong> In Copilot Studio, create a new Copilot. Under \"Generative AI,\" add the URL of your SharePoint knowledge base. Refine the system prompt: \"You are an assistant for city employees. You answer questions based only on official HR documents. Do not answer personal questions or provide financial advice. Always cite your source document.\"</li><li><strong>Test and Deploy:</strong> Thoroughly test the Copilot with a pilot group of employees from different departments. Ask it real-world questions and verify the accuracy of its answers and the source links it provides. Once you are confident in its performance, deploy it broadly via Microsoft Teams to make it easily accessible to all staff.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Use the Copilot to initiate workflows. For example, after answering a question about parental leave, the Copilot could ask, \"Would you like to apply for parental leave?\" If the user says yes, it can trigger a Power Automate flow that starts the official leave request and approval process, creating a seamless transition from information gathering to action.</p>"
        },
        {
            "id": 52,
            "title": "New Employee Onboarding",
            "industry": "Public Sector",
            "technology": "Power Automate",
            "miniDescription": "Automate and orchestrate the entire onboarding checklist to ensure a seamless day-one experience for every new hire.",
            "technicalLevel": 6,
            "problem": "A new urban planner is hired. HR sends an email to IT to create their accounts, another email to facilities to assign a desk, and a third to the new hire's manager. The manager forgets to request access to a key project management system, so the new employee can't do any meaningful work for their first two days.",
            "value": "Onboarding a new employee in the public sector involves a complex series of tasks across multiple departments: HR, IT, finance, and the employee's own department. A manual process leads to delays, missed steps, and a poor day-one experience for the new hire. This solution automates and orchestrates the entire onboarding checklist.",
            "roi": "The ROI is measured in retention and productivity.\n\n<code>Formula:\nValue = (Value of Increased Retention) + (Value of Faster Time-to-Productivity)</code>\n\nExample: Ensures a consistent and professional onboarding experience for every new employee, which is proven to improve long-term retention. Reduces the risk of missed security or compliance steps. Frees up significant administrative time for HR and hiring managers. Gets new employees productive faster.",
            "implementationGuide": "<h5>The Solution Blueprint: An Orchestration Workflow</h5><p>This is a time-based orchestration workflow managed by Power Automate.</p><h5>Step-by-Step Implementation Guide</h5><ol><li><strong>Map the Process:</strong> Work with all involved departments to map out the ideal onboarding timeline and checklist.</li><li><strong>Create a Tracking List:</strong> In SharePoint, create a list to log all onboarding tasks, with columns for New Hire Name, Task Description, Assigned To, Due Date, and Status.</li><li><strong>Build the Flow:</strong> Trigger the flow when the new hire form is submitted. Use Delay until actions to schedule tasks for the future (e.g., delay until 7 days before the start date). Use connectors for Planner (Create a task), Outlook (Send an email), and Teams (Post a message) to assign work and send notifications. Use the SharePoint Create item action to log every task in your tracking list.</li></ol><h5>Beyond the Basics (Pro-Tip)</h5><p>Create a \"buddy\" system. As part of the flow, use an AI Builder prompt to analyze the new hire's profile (department, interests if available) and suggest 3 potential onboarding \"buddies\" from the employee directory. The manager can then select one, and the flow automatically schedules a 30-minute introductory coffee meeting.</p>"
        }
    ]
}
